<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-03-21T19:36:50-04:00</updated><id>/feed.xml</id><entry><title type="html">Bard vs chatgpt, the dice problem part one</title><link href="/2023/03/21/Bard-vs-ChatGPT,-the-dice-problem-part-one.html" rel="alternate" type="text/html" title="Bard vs chatgpt, the dice problem part one" /><published>2023-03-21T00:00:00-04:00</published><updated>2023-03-21T00:00:00-04:00</updated><id>/2023/03/21/Bard%20vs%20ChatGPT,%20the%20dice%20problem%20part%20one</id><content type="html" xml:base="/2023/03/21/Bard-vs-ChatGPT,-the-dice-problem-part-one.html"><![CDATA[<p>Rather quickly I was able to get access to Google’s Bard (their LLM) so the first thing I decided to do was put it up against ChatGPT (the browser edition freely available). So right off the bat I noticed it hadn’t translated the description of my english query into chinese (progress?) (..I’m giving OpenAI a break because they’ve been experiencing difficulties and at the time of writing this entry I still don’t have the history of previous chats back.)</p>

<p><img src="../../../assets/images/openai_chinese_title.jpg" alt="ChatGPT's Auto-generated query header" class="img" /></p>

<p>And it’s impressive actually, I translated the title with google, and it was pretty much as accurate as I would expect google translate to be. I don’t have the direct translation because (the history is gone and I imagine this will be cleaned up), but it’s basically referring to the question I was asking which was seeing how it would interpret the rules to the library of babel.<a href="https://en.wikipedia.org/wiki/The_Library_of_Babel">Wikipedia entry for anyone curious</a>. It actually got that wrong, but maybe that will be a later post. Although my question was in english, so what compelled it to then take the english description and then translate it to chinese is beyond me.</p>

<p>Anyway, fast forward to my access to Google’s bard, I had this thought as I was going for a walk about rolling a dice to decide a particular problem. The problem was pretty simple, something a manager asked me once.</p>

<p>Her question was how I would decide which of three projects I would start first, given they are all equally and completely siloed from each other and outside constraints. After some roundabout questioning by me to see if there was a way to expedite how I could solve multiple parts of each project simultaneously (e.g. do they have any overlap whatsoever). Her answer was no, they do not, and I confirmed that given the problem, each was completely statistically equal within the problem space, realistically it didn’t matter which one I chose. There is no “right” answer as to which project should be prioritized of course, this really being a psychological test, which I answered with applomb and moved on with my life.</p>

<p>Anyway as I was walking I was thinking about rolling a dice to decide this problem, since there are only three projects, I would need to group the numbers of the dice into completely equal sets of two (1,2), (3,4), (5,6) etc. However, unlike a random number generator, a dice exists in 3D space, governed by physics. So this had me wondering if there was an optimal grouping given physical constraints (rolling on a table, throw, etc.) to make the sets as fair as possible.</p>

<p>Immediately I thought that it was obvious I should pick numbers on opposite sides of the dice, this was a hunch, and I was on the move, so I wasn’t going to sit down and try to solve it myself. But it got me thinking about my recent access to Bard and I thought this would be an interesting question to test with the LLMs I have access to. I haven’t asked alpaca yet, but my local 7B model is a bit slow and jankily implemented, maybe later. Here’s the query (as open ended as I could, I didn’t want to try and force an answer).</p>

<h4 id="query">Query:</h4>
<p><img src="../../../assets/images/diceprobquery.png" alt="ChatGPT's Auto-generated query header" class="img" /></p>

<h4 id="here-is-bards-response">Here is Bard’s response:</h4>
<p><img src="../../../assets/images/googlebarddiceprob.png" alt="ChatGPT's Auto-generated query header" class="img" /></p>

<p>Hey! It agreed with my preconceived notions! Alright well I’m just using Bard from here on out. Why bother with a second opinion? I was right and I have a google certified AI to back me up.</p>

<p>Two things stood out to me, one, it referenced a paper and it seemed to be hedging against actually being able to predict a dice throw. Fair enough, my question was vague, although I imagine if I stumbled through this with a person they would sort of grasp what I was getting at, and it agree. But the paper was big, although as I’ll show later there might be some confusion on it’s end.</p>

<h4 id="here-is-chatgpts-response-query-is-the-same">Here is ChatGPT’s response (query is the same):</h4>
<p><img src="../../../assets/images/chatgptdiceprob.png" alt="ChatGPT's Auto-generated query header" class="img" /></p>

<p>Interesting… So initially I think it’s agreeing, it insinuated that the opposite pairs would have an equal chance of landing face up, ok, so that seems to be in line with what Bard said. However it then goes on to say that sequential or opposite numbers should have no effect. So either this generalizes the variation or ignores the sequential part (maybe because I ended the query with the opposite numbers so as it generated it’s response it was picking up as a continuation of what my query was “saying”). I’m not sure how I feel about it suggesting a different approach like using a random number generator. It’s helpful because it’s a solution, and a tried and tested one in most cases, but it’s not within the query parameters.</p>

<p>So initial thoughts, good on Bard for providing a link to the paper unprovoked, that shows some real initiative for anyone wanting to find some references (I’ll read it tonight) <a href="https://www.researchgate.net/publication/236272533_Synchronization_of_clocks">The paper Bard linked</a>. However from the abstract, <em>“We consider the synchonization of two clocks which are accurate (show the same time) but have pendula with different masses.”</em> …I’m not sure I can say for sure if that’s going to help me with my dice problem. On to part two, but later, I’ve got some Haskell to write.</p>

<p>Postscript: I asked my alpaca (7B) model the same query, here is it’s response: <em>The most balanced distribution is by having one side face up and another facing down. THis would ensure an equal probability for each number appearing once a game has been played, regardless of how many times you rolled it (in terms of physics)</em> so not great.</p>]]></content><author><name>Canaan</name></author><summary type="html"><![CDATA[Rather quickly I was able to get access to Google’s Bard (their LLM) so the first thing I decided to do was put it up against ChatGPT (the browser edition freely available). So right off the bat I noticed it hadn’t translated the description of my english query into chinese (progress?) (..I’m giving OpenAI a break because they’ve been experiencing difficulties and at the time of writing this entry I still don’t have the history of previous chats back.)]]></summary></entry><entry><title type="html">Chatgpt in the terminal</title><link href="/2023/03/19/ChatGPT-in-the-terminal.html" rel="alternate" type="text/html" title="Chatgpt in the terminal" /><published>2023-03-19T00:00:00-04:00</published><updated>2023-03-19T00:00:00-04:00</updated><id>/2023/03/19/ChatGPT%20in%20the%20terminal</id><content type="html" xml:base="/2023/03/19/ChatGPT-in-the-terminal.html"><![CDATA[<p>This is mostly so that I can pipe the results into Elixir at the moment.</p>

<p>Currently OpenAI offers python or node bindings, this uses python to pull results directly to the terminal vs having to use their web interface. I’m more familiar with python’s libraries for analysis, so here we are.</p>

<p>Be advised that you need a valid api key to access their models which involves giving them money.<a href="https://github.com/canaanmckenzie/ChatGPT_cmd">Source</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">openai</span>
<span class="kn">import</span> <span class="n">argparse</span>

<span class="c1">#set up openAI api Key
</span><span class="n">openai</span><span class="p">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="s">"API_KEY"</span>

<span class="c1">#generate ai response
</span><span class="k">def</span> <span class="nf">generate_response</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span><span class="n">model</span><span class="p">,</span><span class="n">temperature</span><span class="o">=</span><span class="mf">0.5</span><span class="p">):</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">openai</span><span class="p">.</span><span class="n">Completion</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">engine</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>
        <span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span>
        <span class="n">max_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>
        <span class="n">temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">,</span>
        <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">stop</span><span class="o">=</span><span class="bp">None</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>

<span class="c1">#define command line args
</span><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">'Generate AI response from OpenAI API'</span><span class="p">)</span>

<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="s">'--model'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'MODEL'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">'davinci'</span><span class="p">,</span> 
    <span class="n">help</span><span class="o">=</span><span class="s">'The Name of the OpenAI model to use (default: davinci)'</span><span class="p">)</span>

<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="s">'--temperature'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'TEMP'</span><span class="p">,</span><span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">,</span><span class="n">default</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> 
    <span class="n">help</span><span class="o">=</span><span class="s">'The sampling temperature to use (default: 0.5)'</span><span class="p">)</span>

<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="s">'prompt'</span><span class="p">,</span><span class="n">metavar</span><span class="o">=</span><span class="s">'PROMPT'</span><span class="p">,</span><span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span>
    <span class="n">help</span><span class="o">=</span><span class="s">'The prompt to use fro generating AI response'</span><span class="p">)</span>

<span class="c1">#parse cmd-line args
</span><span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

<span class="c1">#gen response and print it
</span><span class="n">response</span> <span class="o">=</span> <span class="nf">generate_response</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">prompt</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">temperature</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Canaan</name></author><summary type="html"><![CDATA[This is mostly so that I can pipe the results into Elixir at the moment.]]></summary></entry><entry><title type="html">Irregular library</title><link href="/2023/01/05/Irregular-Library.html" rel="alternate" type="text/html" title="Irregular library" /><published>2023-01-05T00:00:00-05:00</published><updated>2023-01-05T00:00:00-05:00</updated><id>/2023/01/05/Irregular%20Library</id><content type="html" xml:base="/2023/01/05/Irregular-Library.html"><![CDATA[<p>Python script for generating a randomly selected libary from Project Gutenberg’s daily uploads.<a href="https://github.com/canaanmckenzie/random_bookshelf">Source</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">urllib.request</span>
<span class="kn">import</span> <span class="n">xml.etree.ElementTree</span> <span class="k">as</span> <span class="n">ET</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">date</span>
<span class="kn">import</span> <span class="n">random</span>

<span class="k">def</span> <span class="nf">get_random_book</span><span class="p">():</span>
    <span class="c1">#get today's date
</span>    <span class="n">today</span> <span class="o">=</span> <span class="n">date</span><span class="p">.</span><span class="nf">today</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">)</span>

    <span class="c1">#open text file
</span>    <span class="n">file_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'daily_uploads/</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">.txt'</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_name</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"error: 'file_name' does not exist"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span><span class="s">'r'</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s">'utf'</span><span class="p">,</span><span class="n">errors</span><span class="o">=</span><span class="s">'ignore'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()</span>
    
    <span class="c1">#pick a random line from the file
</span>    <span class="n">random_line</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

    <span class="c1">#parse the line to find the book number - need to find a more robust way to do this but should work
</span>    <span class="n">book_number</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">title</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="n">random_line</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">().</span><span class="nf">rstrip</span><span class="p">(</span><span class="s">"'"</span><span class="p">)</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
        <span class="n">book_number</span> <span class="o">=</span> <span class="n">url</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">book_number</span><span class="p">,</span> <span class="n">title</span>

<span class="k">def</span> <span class="nf">retrieve_book</span><span class="p">(</span><span class="n">book_number</span><span class="p">,</span><span class="n">title</span><span class="p">):</span>
    <span class="c1">#create an irregular_library folder
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="s">'irregular_library'</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="s">'irregular_library'</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="sa">f</span><span class="s">'irregular_library/</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">'</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sa">f</span><span class="s">'irregular_library/</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

    <span class="c1">#url to books text file
</span>    <span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'https://www.gutenberg.org/cache/epub/</span><span class="si">{</span><span class="n">book_number</span><span class="si">}</span><span class="s">/pg</span><span class="si">{</span><span class="n">book_number</span><span class="si">}</span><span class="s">.txt'</span>
    
    <span class="c1">#error check book exists
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="k">as</span> <span class="n">response</span><span class="p">:</span>
            <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="k">except</span> <span class="n">urllib</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: book with number </span><span class="si">{</span><span class="n">book_number</span><span class="si">}</span><span class="s"> does not exist as a text file"</span><span class="p">)</span>
        <span class="k">return</span>
    
    <span class="c1">#download books text file and add it to the irregular_libray
</span>    <span class="n">response</span> <span class="o">=</span> <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">file_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"irregular_library/</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">.txt"</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_name</span><span class="p">):</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">,</span><span class="n">errors</span><span class="o">=</span><span class="s">'ignore'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
            <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">))</span>
    
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s"> has been saved"</span><span class="p">)</span>


<span class="c1">#create a folder to store the daily uploads if it doesn't exist
</span><span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="s">'daily_uploads'</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">mkdir</span><span class="p">(</span><span class="s">'daily_uploads'</span><span class="p">)</span>

<span class="c1">#download rss feed
</span><span class="n">url</span> <span class="o">=</span> <span class="s">'https://www.gutenberg.org/cache/epub/feeds/today.rss'</span>
<span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">urlretrieve</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="s">'today.rss'</span><span class="p">)</span>

<span class="c1">#parse the rss feed
</span><span class="n">tree</span> <span class="o">=</span> <span class="n">ET</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s">'today.rss'</span><span class="p">)</span>
<span class="n">root</span> <span class="o">=</span> <span class="n">tree</span><span class="p">.</span><span class="nf">getroot</span><span class="p">()</span>

<span class="n">today</span> <span class="o">=</span> <span class="n">date</span><span class="p">.</span><span class="nf">today</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">);</span>

<span class="c1">#open a text file to store the book title and urls
</span><span class="n">file_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'daily_uploads/</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">.txt'</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">,</span><span class="n">errors</span><span class="o">=</span><span class="s">'ignore'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="c1">#find &lt;items&gt;
</span>    <span class="n">items</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="s">'channel/item'</span><span class="p">)</span>

    <span class="c1">#loop through each upload
</span>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">:</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="s">'title'</span><span class="p">).</span><span class="n">text</span>
        <span class="c1">#get the url of books plaintext file
</span>        <span class="n">links</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="s">'link'</span><span class="p">)</span>
        <span class="n">file_url</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">link</span> <span class="ow">in</span> <span class="n">links</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">link</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
                <span class="n">file_url</span> <span class="o">=</span> <span class="n">link</span><span class="p">.</span><span class="n">text</span>
                <span class="k">break</span>
        <span class="k">if</span> <span class="n">file_url</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"no URL found for '</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">'"</span><span class="p">)</span>
            <span class="k">continue</span>

        <span class="c1">#write the title and URL to the text file
</span>        <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">'</span><span class="se">\t</span><span class="si">{</span><span class="n">file_url</span><span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
<span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="s">'today.rss'</span><span class="p">)</span>

<span class="c1">#get random book number from text file - change this to get book txt file from project Gutenberg
</span><span class="n">book_number</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="nf">get_random_book</span><span class="p">()</span>
<span class="k">if</span> <span class="n">book_number</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Book of the day for </span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s"> is </span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">book_number</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="nf">retrieve_book</span><span class="p">(</span><span class="n">book_number</span><span class="p">,</span> <span class="n">title</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Error getting book number"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Canaan</name></author><summary type="html"><![CDATA[Python script for generating a randomly selected libary from Project Gutenberg’s daily uploads.Source.]]></summary></entry></feed>