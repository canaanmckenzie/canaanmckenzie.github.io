<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-03-28T23:41:31-04:00</updated><id>/feed.xml</id><entry><title type="html">first thoughts on HigherOrderCo’s HVM</title><link href="/notes/First-thoughts-on-HigherOrderCo's-HVM/" rel="alternate" type="text/html" title="first thoughts on HigherOrderCo’s HVM" /><published>2023-03-28T00:00:00-04:00</published><updated>2023-03-28T00:00:00-04:00</updated><id>/notes/First%20thoughts%20on%20HigherOrderCo&apos;s%20HVM</id><content type="html" xml:base="/notes/First-thoughts-on-HigherOrderCo&apos;s-HVM/"><![CDATA[<p>Well I’ve been looking at <a href="https://github.com/HigherOrderCO">HigherOrderCO’s</a> HVM architecture again after I first noticed it a year ago. (It resurfaced on Hacker News recently, probably spurred by the hype around LLM’s/fast/powerful computation and general enthusiasm for functional programming which has inexplicably struck up again. At a high-level it provides
an interesting paradigm of computation based on modifying lambda calculus to match part of <a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.2386&amp;rep=rep1&amp;type=pdf">Lamping’s optimal reduction algorithm</a>. This was partly inspired by this <a href="https://pdf.sciencedirectassets.com/272575/1-s2.0-S0890540100X00600/1-s2.0-S0890540197926432/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEHoaCXVzLWVhc3QtMSJGMEQCIFenjSQDnYpHfO6%2BsFzb9mJajTRtBqucAhzKd5aHDvsXAiBRNWehZhFr6YI6lrPnLhBvRwlZdSSSXiPOMBld56Zx1iqzBQhTEAUaDDA1OTAwMzU0Njg2NSIM1nmBG%2FlpszBBa6tqKpAFRmA4EdQK7rP6ryCzBIA%2BZRzardrWN2Bnlggc4o1Mp1DEtTXICEU%2BLif0CiSIwNLyfIoTUXO9XZzJzSFBue6UCMeMLgtCnbQayHTex5dZr%2F3BbWYhmjWY%2BWOll78SB6Ukp8vHsrgu47cKV%2BAICBVeMP8z%2BfFRGQrJH3Lrp9u82DRed7WSHxLJCKCeV3jeKdOkIE4cjJ7uu7LBOig81yZbO793EjrB%2FP%2Fa864RqRuWBkXC8cXNpMO3LyHn1FclEQXELsWFSOssfOTKBUf%2BpUzO9o0ycmYnyN8N5gxy%2FcCYcOTlfkhOg066N2CiFEqnoqsDx%2Fwdl5I0uNUr2n06%2BTLgHZa3RCeMlqeVUPCfP4PlnnuUApY6J%2Fon2r1IeYFVC9OIY5GtBkPHUWJIkEYQkZfy52RqgBvecTf3ggYSHCbKpanQHVeGRilySzY85KH55ByfYaokNdNgLkLLAFcYBi7FjdfFNPpPxZQmPlncGjaF46DB6%2B2jQrAYDmyHSN6Yc9INCTjM4SAMK2g43Kds6kxz7Bwe9pX1%2BE%2B4VfSjrPumnpp4%2BGPNfvJmudxBD%2BFmundqKR5za8Adt1u8Is%2BORkCd%2FoYzmifusLEylqIP9t%2BdxwkqlnIqz8JoZIFI7x%2BUgGUMypDj8kGK%2FqUFeSYIzXwWvlDMPiJJnCcbPLm7cDpQIuLL6PXZxXW0lM8%2BYGtEBmBiNbWzQ3fShMln1An7QMSctbUY10iJK%2FR%2B58l%2FicfTEC%2FdqwiFnWG4JOVVpMMxQTyMMFIjany1iHLsM3PbKoLE%2Bv3y96oVbuS%2FRx2EUsvoVFC9Y%2Bk4qCTtTpwJv9NFgdiuhq5Uj7qBfGrkeyz4jOp3lzfVV6MtvV%2FAGxzTmSq9B%2B0wt7WOoQY6sgEtWDA0CmMSK0pVyGyNxBRaRkt0wBvwuQihi465YAy6VqLAHOdz2omAGxpiixp85z2%2FH5gp17ofY62mzz%2BagbSFK7dENzTd2hUoJoNVS5x0DHR%2B99Lzol9Gnd5VTBrCC5fm4%2FZprJe%2B98joimhKn3Gn9fnOk%2F8XKevVhGPhF1GbPrK5tp%2FpZfM9KtCiWXe2GtsjMDO4wu%2BE1y0hsWSHgHAe9LxAAvxv0yEH36bkzJUqfvfL&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20230329T031558Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=300&amp;X-Amz-Credential=ASIAQ3PHCVTYZ3URLACO%2F20230329%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Signature=17a07baf8f565c0bfd27ed0d37eb4eeacf4ba5fba8b511297d48f2f398239ba9&amp;hash=749a7f842c0602971540a3872dddf1687fbdbb1c7de1c481427aa72f3fd11d49&amp;host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&amp;pii=S0890540197926432&amp;tid=spdf-296fa6c4-b04c-4542-aca9-040e79a60dc5&amp;sid=f0078f9d9f77e14cbb4868d14d6ac8d88128gxrqa&amp;type=client&amp;tsoh=d3d3LnNjaWVuY2VkaXJlY3QuY29t&amp;ua=13105902025302515c51&amp;rr=7af4f390a9333068&amp;cc=us">paper</a> and an adoption of previously well documented optimal evaluations in functional programming. <em>The Optimal Implementation of Functional Programming Languages (Cambridge Tracts in Theoretical Computer Science, Series Number 45)</em> describes a “reduction machine” pages 14-39 which this emulates.</p>

<p>I’ll add to this and probably more blog posts as I go through the early stages, but I thought I would write something down for now, I’ll be breaking down the papers/models more in depth, and maybe glean some insight in how they can be optimized. (Spoiler, I have a fairly fast machine, and the example sequential function provided on the <a href="https://github.com/HigherOrderCO/HVM/blob/master/guide/README.md">Github Overview</a> ran 5x slower than as purported in the README. based on the hvm built in timer and my own batch file measuring program run time.)</p>

<p>batch file here if anyone wants some open source code to time operations on a windows machine.</p>

<p>Just add it to your path and run <code class="language-plaintext highlighter-rouge">timecmd</code> or whatever you call it in your terminal.</p>

<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo <span class="na">off</span>
@setlocal

<span class="kd">set</span> <span class="nb">start</span><span class="o">=</span><span class="nv">%time%</span>

<span class="nb">cmd</span> <span class="na">/c </span><span class="err">%</span><span class="o">*</span>

<span class="kd">set</span> <span class="kd">end</span><span class="o">=</span><span class="nv">%time%</span>
<span class="kd">set</span> <span class="kd">options</span><span class="o">=</span><span class="s2">"tokens=1-4 delims=:.,"</span>
<span class="k">for</span> <span class="na">/f </span><span class="nv">%options%</span> <span class="vm">%%a</span> <span class="k">in</span> <span class="o">(</span><span class="s2">"</span><span class="nv">%start%</span><span class="s2">"</span><span class="o">)</span> <span class="k">do</span> <span class="kd">set</span> <span class="kd">start_h</span><span class="o">=</span><span class="vm">%%a</span><span class="o">&amp;</span><span class="kd">set</span> <span class="na">/a </span><span class="kd">start_m</span><span class="o">=</span><span class="m">100</span><span class="vm">%%b</span> <span class="err">%%</span> <span class="m">100</span><span class="o">&amp;</span><span class="kd">set</span> <span class="na">/a </span><span class="kd">start_s</span><span class="o">=</span><span class="m">100</span><span class="vm">%%c</span> <span class="err">%%</span> <span class="m">100</span><span class="o">&amp;</span><span class="kd">set</span> <span class="na">/a </span><span class="kd">start_ms</span><span class="o">=</span><span class="m">100</span><span class="vm">%%d</span> <span class="err">%%</span> <span class="m">100</span>
<span class="k">for</span> <span class="na">/f </span><span class="nv">%options%</span> <span class="vm">%%a</span> <span class="k">in</span> <span class="o">(</span><span class="s2">"</span><span class="nv">%end%</span><span class="s2">"</span><span class="o">)</span> <span class="k">do</span> <span class="kd">set</span> <span class="kd">end_h</span><span class="o">=</span><span class="vm">%%a</span><span class="o">&amp;</span><span class="kd">set</span> <span class="na">/a </span><span class="kd">end_m</span><span class="o">=</span><span class="m">100</span><span class="vm">%%b</span> <span class="err">%%</span> <span class="m">100</span><span class="o">&amp;</span><span class="kd">set</span> <span class="na">/a </span><span class="kd">end_s</span><span class="o">=</span><span class="m">100</span><span class="vm">%%c</span> <span class="err">%%</span> <span class="m">100</span><span class="o">&amp;</span><span class="kd">set</span> <span class="na">/a </span><span class="kd">end_ms</span><span class="o">=</span><span class="m">100</span><span class="vm">%%d</span> <span class="err">%%</span> <span class="m">100</span>

<span class="kd">set</span> <span class="na">/a </span><span class="kd">hours</span><span class="o">=</span><span class="nv">%end_h%</span><span class="o">-</span><span class="nv">%start_h%</span>
<span class="kd">set</span> <span class="na">/a </span><span class="kd">mins</span><span class="o">=</span><span class="nv">%end_m%</span><span class="o">-</span><span class="nv">%start_m%</span>
<span class="kd">set</span> <span class="na">/a </span><span class="kd">secs</span><span class="o">=</span><span class="nv">%end_s%</span><span class="o">-</span><span class="nv">%start_s%</span>
<span class="kd">set</span> <span class="na">/a </span><span class="kd">ms</span><span class="o">=</span><span class="nv">%end_ms%</span><span class="o">-</span><span class="nv">%start_ms%</span>
<span class="k">if</span> <span class="nv">%ms%</span> <span class="ow">lss</span> <span class="m">0</span> <span class="kd">set</span> <span class="na">/a </span><span class="kd">secs</span> <span class="o">=</span> <span class="nv">%secs%</span> <span class="o">-</span> <span class="m">1</span> <span class="o">&amp;</span> <span class="kd">set</span> <span class="na">/a </span><span class="kd">ms</span> <span class="o">=</span> <span class="m">100</span><span class="nv">%ms%</span>
<span class="k">if</span> <span class="nv">%secs%</span> <span class="ow">lss</span> <span class="m">0</span> <span class="kd">set</span> <span class="na">/a </span><span class="kd">mins</span> <span class="o">=</span> <span class="nv">%mins%</span> <span class="o">-</span> <span class="m">1</span> <span class="o">&amp;</span> <span class="kd">set</span> <span class="na">/a </span><span class="kd">secs</span> <span class="o">=</span> <span class="m">60</span><span class="nv">%secs%</span>
<span class="k">if</span> <span class="nv">%mins%</span> <span class="ow">lss</span> <span class="m">0</span> <span class="kd">set</span> <span class="na">/a </span><span class="kd">hours</span> <span class="o">=</span> <span class="nv">%hours%</span> <span class="o">-</span> <span class="m">1</span> <span class="o">&amp;</span> <span class="kd">set</span> <span class="na">/a </span><span class="kd">mins</span> <span class="o">=</span> <span class="m">60</span><span class="nv">%mins%</span>
<span class="k">if</span> <span class="nv">%hours%</span> <span class="ow">lss</span> <span class="m">0</span> <span class="kd">set</span> <span class="na">/a </span><span class="kd">hours</span> <span class="o">=</span> <span class="m">24</span><span class="nv">%hours%</span>
<span class="k">if</span> <span class="m">1</span><span class="nv">%ms%</span> <span class="ow">lss</span> <span class="m">100</span> <span class="kd">set</span> <span class="kd">ms</span><span class="o">=</span><span class="m">0</span><span class="nv">%ms%</span>

<span class="kd">set</span> <span class="na">/a </span><span class="kd">totalsecs</span> <span class="o">=</span> <span class="nv">%hours%</span><span class="o">*</span><span class="m">3600</span> <span class="o">+</span> <span class="nv">%mins%</span><span class="o">*</span><span class="m">60</span> <span class="o">+</span> <span class="nv">%secs%</span>
<span class="nb">echo</span> <span class="kd">command</span> <span class="kd">took</span> <span class="nv">%hours%</span>:<span class="nv">%mins%</span>:<span class="nv">%secs%</span>.<span class="nv">%ms%</span> <span class="o">(</span><span class="nv">%totalsecs%</span>.<span class="nv">%ms%</span><span class="kd">s</span> <span class="kd">total</span><span class="o">)</span>
</code></pre></div></div>
<p>Overall, I’m interested and skeptically enthusiastic about this, and there will definitely be more to come on this from me.</p>]]></content><author><name>Canaan</name></author><summary type="html"><![CDATA[Well I’ve been looking at HigherOrderCO’s HVM architecture again after I first noticed it a year ago. (It resurfaced on Hacker News recently, probably spurred by the hype around LLM’s/fast/powerful computation and general enthusiasm for functional programming which has inexplicably struck up again. At a high-level it provides an interesting paradigm of computation based on modifying lambda calculus to match part of Lamping’s optimal reduction algorithm. This was partly inspired by this paper and an adoption of previously well documented optimal evaluations in functional programming. The Optimal Implementation of Functional Programming Languages (Cambridge Tracts in Theoretical Computer Science, Series Number 45) describes a “reduction machine” pages 14-39 which this emulates.]]></summary></entry><entry><title type="html">Measurable Entropy</title><link href="/notes/Measurable-Entropy/" rel="alternate" type="text/html" title="Measurable Entropy" /><published>2023-03-25T00:00:00-04:00</published><updated>2023-03-25T00:00:00-04:00</updated><id>/notes/Measurable%20Entropy</id><content type="html" xml:base="/notes/Measurable-Entropy/"><![CDATA[<p>A brief introduction to basic information theory (entropy/information as a measure for theoretical unpredictability of data) and descriptive statistics (central tendency, dispersian, and shape). The maximilization of entropy under different constraints yields some common probability distributions: uniform distribution (given no prior knowledge); normal distribution (given that mean and variance are known).</p>

<p>Shannon entropy:</p>
<div class="mathblock"><script type="math/tex; mode=display">
\begin{equation} 
H(X) = -\sum_{i=1}^{n} p(x_i) \log_2 p(x_i)
\end{equation}
</script></div>

<p>implemented here</p>
<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="nn">Data.List</span> <span class="p">(</span><span class="nf">group</span><span class="p">,</span> <span class="nf">sort</span><span class="p">)</span>

<span class="n">shannonEntropy</span> <span class="o">::</span> <span class="p">[</span><span class="kt">Double</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">Double</span>
<span class="n">shannonEntropy</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">negate</span> <span class="o">$</span> <span class="n">sum</span> <span class="o">$</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span> <span class="o">*</span> <span class="n">logBase</span> <span class="mi">2</span> <span class="n">p</span><span class="p">)</span> <span class="n">ps</span>
  <span class="kr">where</span> <span class="n">ps'</span> <span class="o">=</span> <span class="n">map</span> <span class="p">(</span><span class="nf">\</span><span class="n">g</span> <span class="o">-&gt;</span> <span class="n">fromIntegral</span> <span class="p">(</span><span class="n">length</span> <span class="n">g</span><span class="p">)</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span> <span class="n">grouped</span>
        <span class="n">grouped</span> <span class="o">=</span> <span class="n">group</span> <span class="o">$</span> <span class="n">sort</span> <span class="n">ps</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">fromIntegral</span> <span class="o">$</span> <span class="n">length</span> <span class="n">ps</span>

<span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="kr">let</span> <span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">]</span>
  <span class="n">putStrLn</span> <span class="o">$</span> <span class="s">"Entropy of "</span> <span class="o">++</span> <span class="n">show</span> <span class="n">p</span> <span class="o">++</span> <span class="s">" is "</span> <span class="o">++</span> <span class="n">show</span> <span class="p">(</span><span class="n">shannonEntropy</span> <span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<p>For discrete random variables \(X\) with pmf <em>p(x)</em>:</p>]]></content><author><name></name></author><summary type="html"><![CDATA[A brief introduction to basic information theory (entropy/information as a measure for theoretical unpredictability of data) and descriptive statistics (central tendency, dispersian, and shape). The maximilization of entropy under different constraints yields some common probability distributions: uniform distribution (given no prior knowledge); normal distribution (given that mean and variance are known).]]></summary></entry><entry><title type="html">ChatGPT in the terminal</title><link href="/notes/ChatGPT-in-the-terminal/" rel="alternate" type="text/html" title="ChatGPT in the terminal" /><published>2023-01-10T00:00:00-05:00</published><updated>2023-01-10T00:00:00-05:00</updated><id>/notes/ChatGPT%20in%20the%20terminal</id><content type="html" xml:base="/notes/ChatGPT-in-the-terminal/"><![CDATA[<p>Currently OpenAI offers python or node bindings, this uses python to pull results directly to the terminal vs having to use their web interface. I’m more familiar with python’s libraries for analysis, so here we are.</p>

<p>Be advised that you need a valid api key to access their models. <a href="https://github.com/canaanmckenzie/ChatGPT_cmd">Source</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">openai</span>
<span class="kn">import</span> <span class="n">argparse</span>

<span class="c1">#set up openAI api Key
</span><span class="n">openai</span><span class="p">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="s">"API_KEY"</span>

<span class="c1">#generate ai response
</span><span class="k">def</span> <span class="nf">generate_response</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span><span class="n">model</span><span class="p">,</span><span class="n">temperature</span><span class="o">=</span><span class="mf">0.5</span><span class="p">):</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">openai</span><span class="p">.</span><span class="n">Completion</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">engine</span> <span class="o">=</span> <span class="n">model</span><span class="p">,</span>
        <span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span>
        <span class="n">max_tokens</span><span class="o">=</span><span class="mi">1024</span><span class="p">,</span>
        <span class="n">temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">,</span>
        <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">stop</span><span class="o">=</span><span class="bp">None</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>

<span class="c1">#define command line args
</span><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">'Generate AI response from OpenAI API'</span><span class="p">)</span>

<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="s">'--model'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'MODEL'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">'davinci'</span><span class="p">,</span> 
    <span class="n">help</span><span class="o">=</span><span class="s">'The Name of the OpenAI model to use (default: davinci)'</span><span class="p">)</span>

<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="s">'--temperature'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'TEMP'</span><span class="p">,</span><span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">,</span><span class="n">default</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> 
    <span class="n">help</span><span class="o">=</span><span class="s">'The sampling temperature to use (default: 0.5)'</span><span class="p">)</span>

<span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="s">'prompt'</span><span class="p">,</span><span class="n">metavar</span><span class="o">=</span><span class="s">'PROMPT'</span><span class="p">,</span><span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span>
    <span class="n">help</span><span class="o">=</span><span class="s">'The prompt to use fro generating AI response'</span><span class="p">)</span>

<span class="c1">#parse cmd-line args
</span><span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

<span class="c1">#gen response and print it
</span><span class="n">response</span> <span class="o">=</span> <span class="nf">generate_response</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">prompt</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">temperature</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Canaan</name></author><summary type="html"><![CDATA[Currently OpenAI offers python or node bindings, this uses python to pull results directly to the terminal vs having to use their web interface. I’m more familiar with python’s libraries for analysis, so here we are.]]></summary></entry><entry><title type="html">Irregular Library</title><link href="/notes/Irregular-Library/" rel="alternate" type="text/html" title="Irregular Library" /><published>2019-10-05T00:00:00-04:00</published><updated>2019-10-05T00:00:00-04:00</updated><id>/notes/Irregular%20Library</id><content type="html" xml:base="/notes/Irregular-Library/"><![CDATA[<p>Python script for generating a randomly selected libary from Project Gutenberg’s daily uploads. <a href="https://github.com/canaanmckenzie/random_bookshelf">Source</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">urllib.request</span>
<span class="kn">import</span> <span class="n">xml.etree.ElementTree</span> <span class="k">as</span> <span class="n">ET</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">date</span>
<span class="kn">import</span> <span class="n">random</span>

<span class="k">def</span> <span class="nf">get_random_book</span><span class="p">():</span>
    <span class="c1">#get today's date
</span>    <span class="n">today</span> <span class="o">=</span> <span class="n">date</span><span class="p">.</span><span class="nf">today</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">)</span>

    <span class="c1">#open text file
</span>    <span class="n">file_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'daily_uploads/</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">.txt'</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_name</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"error: 'file_name' does not exist"</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span><span class="s">'r'</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s">'utf'</span><span class="p">,</span><span class="n">errors</span><span class="o">=</span><span class="s">'ignore'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()</span>
    
    <span class="c1">#pick a random line from the file
</span>    <span class="n">random_line</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

    <span class="c1">#parse the line to find the book number - need to find a more robust way to do this but should work
</span>    <span class="n">book_number</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">title</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="n">random_line</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s">'</span><span class="se">\t</span><span class="s">'</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">().</span><span class="nf">rstrip</span><span class="p">(</span><span class="s">"'"</span><span class="p">)</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
        <span class="n">book_number</span> <span class="o">=</span> <span class="n">url</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">book_number</span><span class="p">,</span> <span class="n">title</span>

<span class="k">def</span> <span class="nf">retrieve_book</span><span class="p">(</span><span class="n">book_number</span><span class="p">,</span><span class="n">title</span><span class="p">):</span>
    <span class="c1">#create an irregular_library folder
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="s">'irregular_library'</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="s">'irregular_library'</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="sa">f</span><span class="s">'irregular_library/</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">'</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sa">f</span><span class="s">'irregular_library/</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

    <span class="c1">#url to books text file
</span>    <span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'https://www.gutenberg.org/cache/epub/</span><span class="si">{</span><span class="n">book_number</span><span class="si">}</span><span class="s">/pg</span><span class="si">{</span><span class="n">book_number</span><span class="si">}</span><span class="s">.txt'</span>
    
    <span class="c1">#error check book exists
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="k">as</span> <span class="n">response</span><span class="p">:</span>
            <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="k">except</span> <span class="n">urllib</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Error: book with number </span><span class="si">{</span><span class="n">book_number</span><span class="si">}</span><span class="s"> does not exist as a text file"</span><span class="p">)</span>
        <span class="k">return</span>
    
    <span class="c1">#download books text file and add it to the irregular_libray
</span>    <span class="n">response</span> <span class="o">=</span> <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">file_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"irregular_library/</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">.txt"</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_name</span><span class="p">):</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">,</span><span class="n">errors</span><span class="o">=</span><span class="s">'ignore'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
            <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">))</span>
    
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s"> has been saved"</span><span class="p">)</span>


<span class="c1">#create a folder to store the daily uploads if it doesn't exist
</span><span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="s">'daily_uploads'</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">mkdir</span><span class="p">(</span><span class="s">'daily_uploads'</span><span class="p">)</span>

<span class="c1">#download rss feed
</span><span class="n">url</span> <span class="o">=</span> <span class="s">'https://www.gutenberg.org/cache/epub/feeds/today.rss'</span>
<span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">urlretrieve</span><span class="p">(</span><span class="n">url</span><span class="p">,</span><span class="s">'today.rss'</span><span class="p">)</span>

<span class="c1">#parse the rss feed
</span><span class="n">tree</span> <span class="o">=</span> <span class="n">ET</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s">'today.rss'</span><span class="p">)</span>
<span class="n">root</span> <span class="o">=</span> <span class="n">tree</span><span class="p">.</span><span class="nf">getroot</span><span class="p">()</span>

<span class="n">today</span> <span class="o">=</span> <span class="n">date</span><span class="p">.</span><span class="nf">today</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d'</span><span class="p">);</span>

<span class="c1">#open a text file to store the book title and urls
</span><span class="n">file_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'daily_uploads/</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">.txt'</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">,</span><span class="n">errors</span><span class="o">=</span><span class="s">'ignore'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="c1">#find &lt;items&gt;
</span>    <span class="n">items</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="s">'channel/item'</span><span class="p">)</span>

    <span class="c1">#loop through each upload
</span>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">:</span>
        <span class="n">title</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="s">'title'</span><span class="p">).</span><span class="n">text</span>
        <span class="c1">#get the url of books plaintext file
</span>        <span class="n">links</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="s">'link'</span><span class="p">)</span>
        <span class="n">file_url</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">link</span> <span class="ow">in</span> <span class="n">links</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">link</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
                <span class="n">file_url</span> <span class="o">=</span> <span class="n">link</span><span class="p">.</span><span class="n">text</span>
                <span class="k">break</span>
        <span class="k">if</span> <span class="n">file_url</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"no URL found for '</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">'"</span><span class="p">)</span>
            <span class="k">continue</span>

        <span class="c1">#write the title and URL to the text file
</span>        <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">'</span><span class="se">\t</span><span class="si">{</span><span class="n">file_url</span><span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="nb">file</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
<span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="s">'today.rss'</span><span class="p">)</span>

<span class="c1">#get random book number from text file - change this to get book txt file from project Gutenberg
</span><span class="n">book_number</span><span class="p">,</span> <span class="n">title</span> <span class="o">=</span> <span class="nf">get_random_book</span><span class="p">()</span>
<span class="k">if</span> <span class="n">book_number</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Book of the day for </span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s"> is </span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">book_number</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="nf">retrieve_book</span><span class="p">(</span><span class="n">book_number</span><span class="p">,</span> <span class="n">title</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Error getting book number"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Canaan</name></author><summary type="html"><![CDATA[Python script for generating a randomly selected libary from Project Gutenberg’s daily uploads. Source.]]></summary></entry><entry><title type="html">Common Mathematical Notation</title><link href="/notes/Common-Mathematical-Notation/" rel="alternate" type="text/html" title="Common Mathematical Notation" /><published>2014-08-01T00:00:00-04:00</published><updated>2014-08-01T00:00:00-04:00</updated><id>/notes/Common%20Mathematical%20Notation</id><content type="html" xml:base="/notes/Common-Mathematical-Notation/"><![CDATA[<table class="tablelines">
  <thead>
    <tr>
      <th>Symbols       </th>
      <th style="text-align: left">Semantics            </th>
      <th style="text-align: left">LaTeX</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>a,b</em></td>
      <td style="text-align: left">(known) variable or element of a set</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>c</em></td>
      <td style="text-align: left">constant, speed of light</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>e</em></td>
      <td style="text-align: left">Euler’s number</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\pi\)</em></td>
      <td style="text-align: left">constant \(\pi\)</td>
      <td style="text-align: left">\pi</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>i</em></td>
      <td style="text-align: left">general integer, subscript or superscript, imaginary unit</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>j,k,l</em></td>
      <td style="text-align: left">general integer, subscript or superscript</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>n,m</em></td>
      <td style="text-align: left">general natural number, total number</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>p</em></td>
      <td style="text-align: left">general prime number, general probability</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>q</em></td>
      <td style="text-align: left">general prime number</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\varepsilon\)</em></td>
      <td style="text-align: left">positive infinitesimal quantitiy</td>
      <td style="text-align: left">\varepsilon</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>x,y</em></td>
      <td style="text-align: left">(unknown) variable or element of a set; coordinate</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>z,w</em></td>
      <td style="text-align: left">general complex number; coordinate</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\vert x \vert, \vert y \vert\)</em></td>
      <td style="text-align: left">absolute value</td>
      <td style="text-align: left">\vert</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\bar{z}\)</em></td>
      <td style="text-align: left">complex conjugate</td>
      <td style="text-align: left">\bar{z}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\Re{z}\)</em></td>
      <td style="text-align: left">real part</td>
      <td style="text-align: left">\Re{z}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\Im{z}\)</em></td>
      <td style="text-align: left">imaginary part</td>
      <td style="text-align: left">\Im{z}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathcal{T}\)</em></td>
      <td style="text-align: left">topological space</td>
      <td style="text-align: left">\mathcal{T}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>A,B</em></td>
      <td style="text-align: left">(known) set, event</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>X,Y</em></td>
      <td style="text-align: left">(uknown) set, random variable</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathcal{X}\),\(\mathcal{Y}\)</em></td>
      <td style="text-align: left">set of special structure, space</td>
      <td style="text-align: left">\mathcal{X}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>S,\(\Omega\)</em></td>
      <td style="text-align: left">class of sets, sample space</td>
      <td style="text-align: left">\Omega</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>U</em></td>
      <td style="text-align: left">universal set</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(A^\complement\),\(\complement _uA\),\(\bar A\)</em></td>
      <td style="text-align: left">complement of set</td>
      <td style="text-align: left">A^\complement, \complement _uA, \bar A</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\varnothing\)</em></td>
      <td style="text-align: left">empty set</td>
      <td style="text-align: left">\varnothing</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathcal{P}(S)\),\(2^S\)</em></td>
      <td style="text-align: left">power set</td>
      <td style="text-align: left">\mathcal{P}(S)</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\in\)</em></td>
      <td style="text-align: left">is member of</td>
      <td style="text-align: left">\in</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\notin\)</em></td>
      <td style="text-align: left">is not a member of</td>
      <td style="text-align: left">\notin</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\ni\)</em></td>
      <td style="text-align: left">owns (has member)</td>
      <td style="text-align: left">\ni</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\subset\)</em></td>
      <td style="text-align: left">is a proper subset of</td>
      <td style="text-align: left">\subset</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\subseteq\)</em></td>
      <td style="text-align: left">is a subset of</td>
      <td style="text-align: left">\subseteq</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\supset\)</em></td>
      <td style="text-align: left">is a proper superset of</td>
      <td style="text-align: left">\supset</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\supseteq\)</em></td>
      <td style="text-align: left">is a superset of</td>
      <td style="text-align: left">\supseteq</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\cup\)</em></td>
      <td style="text-align: left">set union</td>
      <td style="text-align: left">\cup</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\cap\)</em></td>
      <td style="text-align: left">set interseection</td>
      <td style="text-align: left">\cap</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathbb{N}\)</em></td>
      <td style="text-align: left">set of natural numbers</td>
      <td style="text-align: left">\mathbb{N}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathbb{Z}\)</em></td>
      <td style="text-align: left">set of integers</td>
      <td style="text-align: left">\mathbb{Z}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathbb{Z}^+\)</em></td>
      <td style="text-align: left">set of positive numbers</td>
      <td style="text-align: left">\mathbb{Z}^+</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathbb{R}\)</em></td>
      <td style="text-align: left">set of real numbers</td>
      <td style="text-align: left">\mathbb{R}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathbb{R}^n\)</em></td>
      <td style="text-align: left"><em>n</em>-dimensional real coordinate space</td>
      <td style="text-align: left">\mathbb{R}^n</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathbb{C}\)</em></td>
      <td style="text-align: left">set of complex numbers</td>
      <td style="text-align: left">\mathbb{C}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathbb{C}^n\)</em></td>
      <td style="text-align: left"><em>n</em>-dimensional complex coordinate space</td>
      <td style="text-align: left">\mathbb{C}^n</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathbf{A}\),\(\mathbf{B}\),\(\mathbf{X}\),\(\mathbf{Y}\)</em></td>
      <td style="text-align: left">matrix</td>
      <td style="text-align: left">\mathbf{A}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\boldsymbol{a}\),\(\boldsymbol{b}\),\(\boldsymbol{x}\),\(\boldsymbol{y}\)</em></td>
      <td style="text-align: left">vector</td>
      <td style="text-align: left">\boldsymbol{a}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\boldsymbol{e}\),\(\boldsymbol{i}\),\(\boldsymbol{j}\),\(\boldsymbol{k}\)</em></td>
      <td style="text-align: left">unit vector</td>
      <td style="text-align: left">\boldsymbol{e}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\lambda\)</em></td>
      <td style="text-align: left">eigenvalue</td>
      <td style="text-align: left">\lambda</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\boldsymbol{v}\)</em></td>
      <td style="text-align: left">eigenvector</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\vert\vert a \vert\vert \),\(\vert\vert A \vert\vert\)</em></td>
      <td style="text-align: left">norm</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>(a,b)</em></td>
      <td style="text-align: left">inner product of vectors</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(I _n\)</em></td>
      <td style="text-align: left">identity matrix of size <em>n</em></td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>diag<em>\((a _1,…,a _n)\)</em></td>
      <td style="text-align: left">diagnol matrix of size <em>n</em></td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\delta_{ij} = \begin{cases} 1, &amp; \text{if }i=j \\ 0,&amp; \text{if } i\neq j \end{cases}\)</em></td>
      <td style="text-align: left">Kronecker delta</td>
      <td style="text-align: left">\delta_{ij} = \begin{cases} 1, &amp; <code class="language-plaintext highlighter-rouge">\\</code> \text{if }i=j 0,&amp; \text{if } i\neq j \end{cases}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathbf{A}^{\rm T}\)</em></td>
      <td style="text-align: left">transpose of matrix</td>
      <td style="text-align: left">\mathbf{A}^{\rm T}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\mathbf{A}^{-1}\)</em></td>
      <td style="text-align: left">inverse of matrix</td>
      <td style="text-align: left">\mathbf{A}^{-1}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>rank<em>\((\mathbf{A})\)</em></td>
      <td style="text-align: left">rank of matrix</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>det<em>\((\mathbf{A})\)</em></td>
      <td style="text-align: left">determinant of matrix</td>
      <td style="text-align: left">\det(\mathbf{A})</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>f,g,h</em></td>
      <td style="text-align: left">function or mapping</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\varphi\)</em></td>
      <td style="text-align: left">function or mapping with special property</td>
      <td style="text-align: left">\varphi</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\delta\)</em></td>
      <td style="text-align: left">Dirac delta function</td>
      <td style="text-align: left">\delta</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\eta\)</em></td>
      <td style="text-align: left">Dedekind eta function</td>
      <td style="text-align: left">\eta</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\psi\),\(\Psi\)</em></td>
      <td style="text-align: left">wave function</td>
      <td style="text-align: left">\psi,\Psi</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(\wp\)</em></td>
      <td style="text-align: left">Weierstrass’s elliptic function</td>
      <td style="text-align: left">\wp</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>negl(<em>x</em>)</td>
      <td style="text-align: left">negligible function</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>min(<em>S</em>)</td>
      <td style="text-align: left">minimum</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>max(<em>S</em>)</td>
      <td style="text-align: left">maximum</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>sup(<em>S</em>)</td>
      <td style="text-align: left">supremum</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>inf(<em>S</em>)</td>
      <td style="text-align: left">infimum</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\lim(f(x))\),\(\lim(a_n)\)</td>
      <td style="text-align: left">limit</td>
      <td style="text-align: left">\lim(f(x))</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>dx</em></td>
      <td style="text-align: left">differential</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\partial{x}\)</td>
      <td style="text-align: left">partial differential</td>
      <td style="text-align: left">\partial{x}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\Delta\)</td>
      <td style="text-align: left">Laplace operator, forward difference</td>
      <td style="text-align: left">\Delta</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\nabla\)</td>
      <td style="text-align: left">gradient, backward difference</td>
      <td style="text-align: left">\nabla</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>\(e^x\)</em>,exp(<em>x</em>)</td>
      <td style="text-align: left">exponential function</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\ln{x}\)</td>
      <td style="text-align: left">natural logarithm</td>
      <td style="text-align: left">\ln{x}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\log{x}\)</td>
      <td style="text-align: left">logarithm</td>
      <td style="text-align: left">\log{x}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\mathcal{A}\)</td>
      <td style="text-align: left">algorithm</td>
      <td style="text-align: left">\mathcal{A}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\mathcal{O}(f(n))\)</td>
      <td style="text-align: left">big-O notation</td>
      <td style="text-align: left">\mathcal{O}(f(n))</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\Omega(f(n))\)</td>
      <td style="text-align: left">big-Omega notation</td>
      <td style="text-align: left">\Omega(f(n))</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\Theta(f(n))\)</td>
      <td style="text-align: left">big-Theta notation</td>
      <td style="text-align: left">\Theta(f(n))</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(p_X(x)\)</td>
      <td style="text-align: left">probabily mass function</td>
      <td style="text-align: left">\p_X(x)</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\Pr[X=x]\)</td>
      <td style="text-align: left">probability measure</td>
      <td style="text-align: left">\Pr[X=x]</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\operatorname{E}[X]\)</td>
      <td style="text-align: left">expectation</td>
      <td style="text-align: left">\operatorname{E}[X]</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\operatorname{Cov}(X,Y)\)</td>
      <td style="text-align: left">covariance</td>
      <td style="text-align: left">\operatorname{Cov}(X,Y)</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\operatorname{Var}(X)\)</td>
      <td style="text-align: left">variance</td>
      <td style="text-align: left">\operatorname{Var}(X)</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\sigma\)</td>
      <td style="text-align: left">standard deviation</td>
      <td style="text-align: left">\sigma</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><em>s</em></td>
      <td style="text-align: left">(unbiased) sample standard deviation</td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>\(\bar{X}\)</td>
      <td style="text-align: left">sample mean</td>
      <td style="text-align: left">\bar{X}</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>X\(\sim\)Pois(\(\lambda\))</td>
      <td style="text-align: left">random variable that satifies a probability distribution</td>
      <td style="text-align: left">X \sim Pois \lambda</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Canaan</name></author><summary type="html"><![CDATA[Symbols        Semantics             LaTeX a,b (known) variable or element of a set   c constant, speed of light   e Euler’s number   \(\pi\) constant \(\pi\) \pi i general integer, subscript or superscript, imaginary unit   j,k,l general integer, subscript or superscript   n,m general natural number, total number   p general prime number, general probability   q general prime number   \(\varepsilon\) positive infinitesimal quantitiy \varepsilon x,y (unknown) variable or element of a set; coordinate   z,w general complex number; coordinate   \(\vert x \vert, \vert y \vert\) absolute value \vert \(\bar{z}\) complex conjugate \bar{z} \(\Re{z}\) real part \Re{z} \(\Im{z}\) imaginary part \Im{z} \(\mathcal{T}\) topological space \mathcal{T} A,B (known) set, event   X,Y (uknown) set, random variable   \(\mathcal{X}\),\(\mathcal{Y}\) set of special structure, space \mathcal{X} S,\(\Omega\) class of sets, sample space \Omega U universal set   \(A^\complement\),\(\complement _uA\),\(\bar A\) complement of set A^\complement, \complement _uA, \bar A \(\varnothing\) empty set \varnothing \(\mathcal{P}(S)\),\(2^S\) power set \mathcal{P}(S) \(\in\) is member of \in \(\notin\) is not a member of \notin \(\ni\) owns (has member) \ni \(\subset\) is a proper subset of \subset \(\subseteq\) is a subset of \subseteq \(\supset\) is a proper superset of \supset \(\supseteq\) is a superset of \supseteq \(\cup\) set union \cup \(\cap\) set interseection \cap \(\mathbb{N}\) set of natural numbers \mathbb{N} \(\mathbb{Z}\) set of integers \mathbb{Z} \(\mathbb{Z}^+\) set of positive numbers \mathbb{Z}^+ \(\mathbb{R}\) set of real numbers \mathbb{R} \(\mathbb{R}^n\) n-dimensional real coordinate space \mathbb{R}^n \(\mathbb{C}\) set of complex numbers \mathbb{C} \(\mathbb{C}^n\) n-dimensional complex coordinate space \mathbb{C}^n \(\mathbf{A}\),\(\mathbf{B}\),\(\mathbf{X}\),\(\mathbf{Y}\) matrix \mathbf{A} \(\boldsymbol{a}\),\(\boldsymbol{b}\),\(\boldsymbol{x}\),\(\boldsymbol{y}\) vector \boldsymbol{a} \(\boldsymbol{e}\),\(\boldsymbol{i}\),\(\boldsymbol{j}\),\(\boldsymbol{k}\) unit vector \boldsymbol{e} \(\lambda\) eigenvalue \lambda \(\boldsymbol{v}\) eigenvector   \(\vert\vert a \vert\vert \),\(\vert\vert A \vert\vert\) norm   (a,b) inner product of vectors   \(I _n\) identity matrix of size n   diag\((a _1,…,a _n)\) diagnol matrix of size n   \(\delta_{ij} = \begin{cases} 1, &amp; \text{if }i=j \\ 0,&amp; \text{if } i\neq j \end{cases}\) Kronecker delta \delta_{ij} = \begin{cases} 1, &amp; \\ \text{if }i=j 0,&amp; \text{if } i\neq j \end{cases} \(\mathbf{A}^{\rm T}\) transpose of matrix \mathbf{A}^{\rm T} \(\mathbf{A}^{-1}\) inverse of matrix \mathbf{A}^{-1} rank\((\mathbf{A})\) rank of matrix   det\((\mathbf{A})\) determinant of matrix \det(\mathbf{A}) f,g,h function or mapping   \(\varphi\) function or mapping with special property \varphi \(\delta\) Dirac delta function \delta \(\eta\) Dedekind eta function \eta \(\psi\),\(\Psi\) wave function \psi,\Psi \(\wp\) Weierstrass’s elliptic function \wp negl(x) negligible function   min(S) minimum   max(S) maximum   sup(S) supremum   inf(S) infimum   \(\lim(f(x))\),\(\lim(a_n)\) limit \lim(f(x)) dx differential   \(\partial{x}\) partial differential \partial{x} \(\Delta\) Laplace operator, forward difference \Delta \(\nabla\) gradient, backward difference \nabla \(e^x\),exp(x) exponential function   \(\ln{x}\) natural logarithm \ln{x} \(\log{x}\) logarithm \log{x} \(\mathcal{A}\) algorithm \mathcal{A} \(\mathcal{O}(f(n))\) big-O notation \mathcal{O}(f(n)) \(\Omega(f(n))\) big-Omega notation \Omega(f(n)) \(\Theta(f(n))\) big-Theta notation \Theta(f(n)) \(p_X(x)\) probabily mass function \p_X(x) \(\Pr[X=x]\) probability measure \Pr[X=x] \(\operatorname{E}[X]\) expectation \operatorname{E}[X] \(\operatorname{Cov}(X,Y)\) covariance \operatorname{Cov}(X,Y) \(\operatorname{Var}(X)\) variance \operatorname{Var}(X) \(\sigma\) standard deviation \sigma s (unbiased) sample standard deviation   \(\bar{X}\) sample mean \bar{X} X\(\sim\)Pois(\(\lambda\)) random variable that satifies a probability distribution X \sim Pois \lambda]]></summary></entry><entry><title type="html">Adding LaTeX to Jekyll</title><link href="/notes/Adding-LaTex-to-Jekyll/" rel="alternate" type="text/html" title="Adding LaTeX to Jekyll" /><published>2014-01-06T00:00:00-05:00</published><updated>2014-01-06T00:00:00-05:00</updated><id>/notes/Adding%20LaTex%20to%20Jekyll</id><content type="html" xml:base="/notes/Adding-LaTex-to-Jekyll/"><![CDATA[<p><em>Note:</em> This has been proven to work on Github Pages using Jekyll. I’m using a custom theme so I can’t say for sure that there won’t be a conflict if you are using a pre-built theme. You can find the official MathJax documentation <a href="https://www.mathjax.org/">here</a>.</p>

<p>In the <code class="language-plaintext highlighter-rouge">_config.yml</code> make sure that you are using <em>kramdown</em> (the default) for your markdown parser. Both maruku and redcarpet are not supported by Github Pages.</p>

<p>Depending on your theme you might have an <code class="language-plaintext highlighter-rouge">_include</code> folder with a <code class="language-plaintext highlighter-rouge">script.html</code> or <code class="language-plaintext highlighter-rouge">head.html</code> where you can add the code. To allow for calls on pages that use the <code class="language-plaintext highlighter-rouge">default.html</code> from the <code class="language-plaintext highlighter-rouge">_layouts</code> folder, add this code to the <code class="language-plaintext highlighter-rouge">default.html</code> in the <code class="language-plaintext highlighter-rouge">&lt;head&gt;&lt;/head&gt;</code> section.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
{% if page.usemathjax %}
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">async</span> <span class="na">src=</span><span class="s">'https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML'</span><span class="nt">&gt;&lt;/script&gt;</span>
{% endif %}

</code></pre></div></div>

<p>For any page’s markdown file where you want to use MathJax, include <code class="language-plaintext highlighter-rouge">usemathjax: true</code> in the YAML front matter.</p>

<p>By default the <em>tex2jax</em> preprocessor defines the LaTeX math delimiters, which are <code class="language-plaintext highlighter-rouge">\\(...\\)</code> for inline expressions and <code class="language-plaintext highlighter-rouge">\\[...\\]</code> for displayed expressions. The TeX delimiters <code class="language-plaintext highlighter-rouge">$$...$$</code> are also defined for displayed expressions, but not the inline delimters <code class="language-plaintext highlighter-rouge">$...$</code>.</p>

<p>Here I have the curve for a trefoil knot in TeX notation</p>

<p><code class="language-plaintext highlighter-rouge">$$x = sint + 2sin2t$$</code></p>

<p><code class="language-plaintext highlighter-rouge">$$y = cost - 2cos2t$$</code></p>

<p><code class="language-plaintext highlighter-rouge">$$z = -sin3t$$</code></p>

<p>formatted properly as:</p>

\[x = sint + 2sin2t\]

\[y = cost - 2cos2t\]

\[z = -sin3t\]

<p>Expressions like \(cos(x^2)\) are rendered inline with <code class="language-plaintext highlighter-rouge">\\(cos(x^2)\\)</code>. Operators like <code class="language-plaintext highlighter-rouge">\mathbf</code> and <code class="language-plaintext highlighter-rouge">\mathsf</code> can be used to define the typestyle corresponding to the proper expression notation within your field of study.</p>

\[\mathbf{X} = \mathbf{Z} \mathbf{P^\mathsf{T}}\]

<p>Subscripts are common and using an underscore will display them properly. <code class="language-plaintext highlighter-rouge">\mathbf{X}_{n,p}</code>.</p>

\[\mathbf{X}_{n,p} = \Omega\]]]></content><author><name>Canaan</name></author><summary type="html"><![CDATA[Note: This has been proven to work on Github Pages using Jekyll. I’m using a custom theme so I can’t say for sure that there won’t be a conflict if you are using a pre-built theme. You can find the official MathJax documentation here.]]></summary></entry></feed>